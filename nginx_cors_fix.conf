# AIxBlock CORS Security Fix Configuration
# This configuration fixes the CORS misconfiguration vulnerability
# by replacing wildcard origins with specific trusted domains

# Main server block for workflow.aixblock.io
server {
    listen 443 ssl http2;
    server_name workflow.aixblock.io;
    
    # SSL configuration (existing)
    ssl_certificate /path/to/certificate.crt;
    ssl_certificate_key /path/to/private.key;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Hide server version information
    server_tokens off;
    
    # Secure CORS configuration
    location / {
        # Get the origin from the request
        set $cors_origin "";
        
        # Check if origin is from trusted domains
        if ($http_origin ~* ^https://(app\.aixblock\.io|workflow\.aixblock\.io|aixblock\.io)$) {
            set $cors_origin $http_origin;
        }
        
        # Add CORS headers only for trusted origins
        if ($cors_origin != "") {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age "86400" always;
        }
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            if ($cors_origin != "") {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
                add_header Access-Control-Max-Age "86400" always;
                add_header Content-Length "0" always;
                add_header Content-Type "text/plain" always;
                return 204;
            }
            # Reject OPTIONS requests from untrusted origins
            return 403;
        }
        
        # Your existing proxy_pass or root configuration
        # proxy_pass http://backend;
        # or
        # root /var/www/html;
        # index index.html;
    }
    
    # API endpoints with stricter CORS
    location /api/ {
        # More restrictive CORS for API endpoints
        set $cors_origin "";
        
        if ($http_origin ~* ^https://(app\.aixblock\.io|workflow\.aixblock\.io)$) {
            set $cors_origin $http_origin;
        }
        
        if ($cors_origin != "") {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age "3600" always; # Shorter TTL for API
        }
        
        if ($request_method = 'OPTIONS') {
            if ($cors_origin != "") {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
                add_header Access-Control-Max-Age "3600" always;
                add_header Content-Length "0" always;
                add_header Content-Type "text/plain" always;
                return 204;
            }
            return 403;
        }
        
        # Your API backend configuration
        # proxy_pass http://api_backend;
    }
    
    # Static files with no CORS (unless needed)
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        # No CORS headers for static files unless specifically needed
    }
}

# Alternative simpler configuration using map directive
# This approach is more efficient for multiple trusted origins
http {
    # Define trusted origins
    map $http_origin $cors_origin {
        default "";
        "~^https://app\.aixblock\.io$" "https://app.aixblock.io";
        "~^https://workflow\.aixblock\.io$" "https://workflow.aixblock.io";
        "~^https://aixblock\.io$" "https://aixblock.io";
    }
    
    server {
        listen 443 ssl http2;
        server_name workflow.aixblock.io;
        
        # Apply CORS headers using the map
        location / {
            # CORS headers
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age "86400" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                if ($cors_origin != "") {
                    add_header Access-Control-Allow-Origin $cors_origin always;
                    add_header Access-Control-Allow-Credentials "true" always;
                    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
                    add_header Access-Control-Max-Age "86400" always;
                    add_header Content-Length "0" always;
                    add_header Content-Type "text/plain" always;
                    return 204;
                }
                return 403;
            }
            
            # Your existing configuration
        }
    }
}

# Information disclosure fix
# Remove server version and other sensitive headers
http {
    # Hide server version
    server_tokens off;
    
    # Remove X-Powered-By header
    more_clear_headers 'X-Powered-By';
    
    # Remove internal IP disclosure
    more_clear_headers 'X-Forwarded-For';
    more_clear_headers 'X-Real-IP';
    
    # Add generic server header
    more_set_headers 'Server: AIxBlock';
}

# Testing configuration
# Use this to test the CORS fix
location /test-cors {
    add_header Content-Type "application/json" always;
    
    # Test endpoint that returns CORS headers
    return 200 '{"message": "CORS test endpoint", "origin": "$http_origin", "cors_allowed": "$cors_origin"}';
}

# Block malicious CORS requests
location /block-malicious {
    # Block requests with suspicious origins
    if ($http_origin ~* "evil|malicious|attacker") {
        return 403;
    }
    
    # Your normal configuration
}
